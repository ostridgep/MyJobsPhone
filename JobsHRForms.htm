<!DOCTYPE html>
<html>
<head>

  <title>MyJobs - Notifications
  </title>
<script src="js/html5sql.js"></script>  
<script src="js/MyJobsDB.js"></script>
<script src="js/MyJobsUtils.js"></script>
  <script type='text/javascript' src='js/jquery-1.11.1.min.js'></script>
  <script type='text/javascript' src='js/jquery.mobile-1.4.2.min.js'></script>
  <link rel="stylesheet" type="text/css" href="css/jquery.mobile-1.4.2.min.css">

<script src="js/jquery.mobile.datepicker.js"></script>
<script src="js/jquery-ui/datepicker.js"></script>


<script type='text/javascript' src="tablesorter/js/jquery.tablesorter.js"></script>
<script type='text/javascript' src="tablesorter/js/jquery.tablesorter.widgets.js"></script>

<script src="js/jquery.magnific-popup.min.js"></script>
<script type="text/javascript" src="cordova.js"></script>
<script type="text/javascript" src="barcodescanner.js"></script>
<link rel="stylesheet" type="text/css" href="tablesorter/css/theme.jui.css">
<link rel="stylesheet" type="text/css" href="tablesorter/css/theme.bootstrap.css">
<link rel="stylesheet" type="text/css" href="tablesorter/docs/css/bootstrap.min.css">
<link rel="stylesheet" type="text/css" href="css/jquery-ui.css">
<link rel="stylesheet" href="css/magnific-popup.css" />
  <script src="jstree/dist/jstree.min.js"></script>
  <link rel="stylesheet" href="jstree/dist/themes/default/style.min.css" />
  <link rel="stylesheet" href="css/font-awesome.min.css">
  <script>
html5sql.openDatabase("com.PJO.MyJobs","MyJobs", 5*1024*1024);	

  </script>




  <style type='text/css'>
  .stripe{
	background-color: lightgrey; 
	color: black;
}
.checkboxtext
{
  /* Checkbox text */
  font-size: 110%;
  display: inline;
}
   .wrapper {
  position: relative;
  padding: 0 5px;
  height: 250px;
  overflow-y: auto;
}
 .mfp-fade.mfp-bg {
	opacity: 0.001; /* Chrome opacity transition bug */
	-webkit-transition: all 0.15s ease-out; 
	-moz-transition: all 0.15s ease-out; 
	transition: all 0.15s ease-out;
}
.mfp-fade.mfp-bg.mfp-ready {
	opacity: 0.8;
}
.mfp-fade.mfp-bg.mfp-removing {
	opacity: 0;
}

.mfp-fade.mfp-wrap .mfp-content {
	opacity: 0;
	-webkit-transition: all 0.15s ease-out; 
	-moz-transition: all 0.15s ease-out; 
	transition: all 0.15s ease-out;
}
.mfp-fade.mfp-wrap.mfp-ready .mfp-content {
	opacity: 1;
}
.mfp-fade.mfp-wrap.mfp-removing .mfp-content {
	opacity: 0;
}
  .block {
    border: 1px solid grey;
    width: 180px;
    height:150px;
    display: inline-block;
    margin: 1em 1em 1em 1em;

border-radius: 15px;
    left:50px
}
  .highlight {

     box-shadow: 5px 5px 5px #888888;

  }  
.white-popup {
  position: relative;
  background: #FFF;
  padding: 20px;
  width: auto;
  max-width: 80%;
  margin: 20px auto;
} 
.ui-btn-width {
    width: 200px !important;
}  
  </style>

 
</head>
<body>
<div align="center"  data-role="page" id="JobsHRForms"> 
 <div data-role="panel" id="options" data-position="right" data-display="overlay"> 
    <h3>HR Forms</h3>
	<TABLE>
	<TR height ="40px"  id="ButtonAcceptedRow"><TD align = "center"><a data-role="button" data-mini="true" id="ButtonAbsence"  href='#popupCreateAbsence'  class="open-popup-link"  style="ui-btn-width:400px" >
	Create Absence      </a></TD></TR>
	<TR  height ="40px"  id="ButtonCancelRow"><TD align = "center"><a  data-role="button" data-mini="true" id="ButtonTravel"   href='#popupCreateTravel'  class="open-popup-link"      >
	Create Travel Request</a></TD></TR>
	
	</table>
  </div> 
	<div   data-role="header" data-position="fixed">
		<table width = "100%">
			<TR height="50px">
				<TD width = "20%"  align="left"><a style="font-size: 100%" href="javascript:window.location.href='JobsHome.htm'"  >
				<i class="fa fa-home fa-2x pull-left fa-border"></i></a></td>
			
				<TD width = "60%"  align= "center"><h1 style="font-size: 100%"><B>MyJobs - HR Forms</B></H1>
				<a href="#lastSyncDets" data-rel="popup"style="color: green; text-decoration:none;"> <Small><P id="lastsync"></p></A></small></TD>
				<TD width = "20%"  align="right"><a style="font-size: 100%" href="#options"    >
				<i class="fa fa-plus fa-2x pull-right fa-border"></i></a></td>
			</TR>
		</table>			
		
	
	</div>  
 

	<div  data-role="content">	
		<DIV>
			<table  id="HRList" name="HRList" cellspacing="0"  style="border-spacing: 0;" class="tablesorter1">
				
			</table>
		</DIV>

		<div style='display:none'>	
			<div id="popupFLTree"  class="white-popup mfp-hide">			
				<div style="background-color:#E9E9E9" align="center"><h1>Select  Functional Location</h1></div>
				 <div id="jstree">
					
    

				</div>
			</div>
		</div>

		<div style='display:none'>	
			<div data-role="popup" id="lastSyncDets">
			  <p id='referenceSyncDetails' ></p>
			  <p id='transactionalSyncDetails' ></p>
			  <p id='uploadSyncDetails' ></p>
			</div>
			<div id="popupCreateAbsence"  class="white-popup mfp-hide">			
				<div style="background-color:#E9E9E9 ; height:44px" align="center">
					<table width = "100%">
						<TR><TD align = "left">
								<a onClick="PopupClose('CANCEL')"  ><i class="fa fa-times fa-2x pull-left fa-border"></i></a>
							</td>
							<TD align="center"><B>Create Absence Request</B></TD>
							<TD align="right">
							<a onClick="PopupClose('SAVEABSENCE')" ><i class="fa fa-save fa-2x pull-right fa-border"></i></a>
							</TD>
						</TR>
					</Table>
	
				</div>
				<div  >
					<TABLE width = "100%">
						<TR>
						<TD align="left" width="20%"><label for="Type" class="select">Type:</label></TD><TD   width="80%"><select data-mini="true" name="AbsenceType" id="AbsenceType" >
						<option value="Compassionate">Compassionate Leave</option>
						<option value="Holiday">Holiday</option>
						<option value="Sickness LT">Long Term Sickness</option>
						<option value="Maternity">Maternity Leave</option>
						<option value="Paternity">Paternity Leave</option>
						<option value="Study LT">Study / Training Leave</option>
						<option value="Lieu">Time Off in Lieu</option>
						</select></TD>
						</TR>

						<TR>
						<TD  align="left">Start Date:</TD><TD   width="80%"><input data-mini="true" id="AbsenceStartDate" type="date" data-format="dd-mm-yy" ></TD>
						</TR>
						<TR>
						<TD  align="left">End Date:</TD><TD  width="80%"><input data-mini="true" id="AbsenceEndDate" type="date" data-format="dd-mm-yy" ></TD>
						</TR>
						<TR>
						<TD align="left" width="10%">No of Days:</TD><TD width="80%"><input data-mini="true" id="AbsenceDays" type="number" ></TD></TR>
						<TR>
						<TD  align="left" width="20%">Comments</TD><TD width="80%"><textarea rows="4" cols="50" id="AbsenceComments"></textarea></TD>
						</TR>
					</TABLE>
  

    
				</div>
			</div>
			<div id="popupCreateTravel"  class="white-popup mfp-hide">			
				<div style="background-color:#E9E9E9 ; height:44px" align="center">
					<table width = "100%">
						<TR><TD align = "left">
								<a onClick="PopupClose('CANCEL')"  ><i class="fa fa-times fa-2x pull-left fa-border"></i></a>
							</td>
							<TD align="center"><B>Create Travel Request</B></TD>
							<TD align="right">
							<a onClick="PopupClose('SAVETRAVEL')" ><i class="fa fa-save fa-2x pull-right fa-border"></i></a>
							</TD>
						</TR>
					</Table>
	
				</div>
				<div  >
					<TABLE width = "100%">
						<TR>
						<TD  align="left">Start Date:</TD><TD   width="80%"><input data-mini="true" id="TravelStartDate" type="date" data-format="dd-mm-yy" ></TD>
						</TR>
						<TR>
						<TD  align="left">End Date:</TD><TD  width="80%"><input data-mini="true" id="TravelEndDate" type="date" data-format="dd-mm-yy" ></TD>
						</TR>
						<TR>
						<TD align="left" width="10%">From:</TD><TD width="80%"><input data-mini="true" id="TravelFrom" type="text" ></TD>
						</TR>
						<TR>
						<TD align="left" width="10%">To:</TD><TD width="80%"><input data-mini="true" id="TravelTo" type="text" ></TD>
						</TR>
						<TR>
						<TD  align="left" width="20%">Comments</TD><TD width="80%"><textarea rows="4" cols="50" id="TravelComments"></textarea></TD>
						</TR>
					</TABLE>
  

    
				</div>
			</div>
		</div>


		
		
		
	</div>	


	

</div>





<Script>

var DeleteClicked=false;
var PopupCloseType="";


BuildHRList();






function DeleteAbsence(id)
{

DeleteClicked=true;
	html5sql.process("DELETE from HRAbsence where id = '"+id+"'",
	 function(transaction, results, rowsArray){
			 location.reload();
	 },
	 function(error, statement){
		
	 }        
	);
}
function DeleteTravel(id)
{

DeleteClicked=true;
	html5sql.process("DELETE from HRTravel where id = '"+id+"'",
	 function(transaction, results, rowsArray){
			 location.reload();
	 },
	 function(error, statement){
		
	 }        
	);
}
function PopupClose(mode)
{
	
	PopupCloseType=mode;
	if(mode=="SAVETRAVEL"){	   
				StartDate=$('#TravelStartDate').val().substring(0,4)+$('#TravelStartDate').val().substring(5,7)+$('#TravelStartDate').val().substring(8,10);	
				EndDate=$('#TravelEndDate').val().substring(0,4)+$('#TravelEndDate').val().substring(5,7)+$('#TravelEndDate').val().substring(8,10);	

				createTravel($('#TravelFrom').val(),$('#TravelTo').val(),StartDate,EndDate,$('#TravelComments').val())
				}
	if(mode=="SAVEABSENCE"){	   
		StartDate=$('#AbsenceStartDate').val().substring(0,4)+$('#AbsenceStartDate').val().substring(5,7)+$('#AbsenceStartDate').val().substring(8,10);	
		EndDate=$('#AbsenceEndDate').val().substring(0,4)+$('#AbsenceEndDate').val().substring(5,7)+$('#AbsenceEndDate').val().substring(8,10);	

		createAbsence($('#AbsenceType').val(),StartDate,EndDate,$('#AbsenceDays').val(),$('#AbsenceComments').val())
		}
	$.magnificPopup.close();
	 $("#options").panel("close");
}





function createAbsence(type,startdate,enddate,days,comments)
{

var ReportedOn=getDate()+" "+getTime();


	html5sql.process("INSERT INTO  HRAbsence (requesteddate, startdate, enddate, type, days, status, comments) VALUES ("+
					 "'"+ReportedOn+"','"+startdate+"','"+enddate+"','"+type+"','"+days+"','NEW','"+comments+"');",
	 function(transaction, results, rowsArray){

		 BuildHRList();
		 
	 },
	 function(error, statement){

		opMessage("Error: " + error.message + " when createAbsence processing " + statement);
		$.magnificPopup.close();
	 }        
	)
}

function createTravel(from,to,startdate,enddate,comments)
{

var ReportedOn=getDate()+" "+getTime();


	html5sql.process("INSERT INTO  HRTravel (requesteddate, startdate, enddate, travelfrom, travelto, status, comments) VALUES ("+
					 "'"+ReportedOn+"','"+startdate+"','"+enddate+"','"+from+"','"+to+"','NEW','"+comments+"');",
	 function(transaction, results, rowsArray){

		 BuildHRList();
		
	 },
	 function(error, statement){

		opMessage("Error: " + error.message + " when createTravel processing " + statement);
		$.magnificPopup.close();
	 }        
	)
}


function zeroFill( number, width )
{
  width -= number.toString().length;
  if ( width > 0 )
  {
    return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
  }
  return number + ""; // always return a string
}
function isEven(value) {
return (value%2 == 0);
}
function BuildHRList(){
var Stripe="";
var opMap="";
var opAppt=""
var HTMLToOutput='';
var rowcnt = 0;
var n=1;
var SQLStatement="";
HTMLToOutput=	'<thead >'+
				'	<tr style="font-size:12px" >'+
				'		<th>Type</th>'+
				'		<th>Requested</th>'+
				'		<th>Details</th>'+
				'		<th> </th>'+
				'	</tr>'+
				'</thead><tbody >'
				
SQLStatement="SELECT * From HRTravel "
	html5sql.process(SQLStatement,
	 function(transaction, results, rowsArray){
			for (var n = 0; n < rowsArray.length; n++) {
				item = rowsArray[n];
					rowcnt = rowcnt+1;
					Stripe="";
					Delete="&nbsp;";
					var No=""
					if (isEven(rowcnt)){
						Stripe='stripe';
						}
					if(item.status=="NEW"){
					
						Delete="<a href='#' onClick='DeleteTravel("+item.id+")' ><img src='images\\delete.gif' width='15px' height='15px' ></A>"
					
					}
;
					HTMLToOutput+= '	<tr style="font-size:12px" class="'+Stripe+'">';	
					HTMLToOutput+= '			<td >Travel</td>';
					HTMLToOutput+= '			<td hidden>'+item.id+'</td>';
					HTMLToOutput+= '			<td>'+item.requesteddate+'</td>';
					HTMLToOutput+= '			<td>'+item.travelfrom+' - '+item.travelto+'</td>';
					HTMLToOutput+= '			<td>'+Delete+'</td></tr>';

					}

				SQLStatement="SELECT * From HRAbsence "
				html5sql.process(SQLStatement,
				 function(transaction, results, rowsArray){
						for (var n = 0; n < rowsArray.length; n++) {
							item = rowsArray[n];
							rowcnt = rowcnt+1;
								Stripe="";
								Delete="&nbsp;";
								var No=""
								if (isEven(rowcnt)){
									Stripe='stripe';
									}
								if(item.status=="NEW"){
								
									Delete="<a href='#' onClick='DeleteAbsence("+item.id+")' ><img src='images\\delete.gif' width='15px' height='15px' ></A>"
								
								}
			;
								HTMLToOutput+= '	<tr style="font-size:12px" class="'+Stripe+'">';	
								HTMLToOutput+= '			<td >Absence</td>';
								HTMLToOutput+= '			<td hidden>'+item.id+'</td>';
								HTMLToOutput+= '			<td>'+item.requesteddate+'</td>';
								HTMLToOutput+= '			<td>'+item.type+' - Days:'+item.days+'</td>';
								HTMLToOutput+= '			<td>'+Delete+'</td></tr>';

								}

						HTMLToOutput+=	'</tbody >'
						$( "#HRList").html(HTMLToOutput);
						$( "#HRList").trigger('create');
						//addRowHandlers();
						SetTableSort();
				 },
				 function(error, statement){
					
				 }        
				);
	 },
	 function(error, statement){
		
	 }        
	);

}


$('.open-popup-link').magnificPopup({
  type:'inline',
  closeOnBgClick: false,
  showCloseBtn:false,
  midClick: true, // Allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source in href.
  callbacks: {
    open: function() {

    },
    close: function() {
		




    }
	}
});
$(document).ready(function() {



});


function SetTableSort()
{
  
	$('table').tablesorter({

		// *** APPEARANCE ***
		// Add a theme - try 'blackice', 'blue', 'dark', 'default'
		//  'dropbox', 'green', 'grey' or 'ice'
		// to use 'bootstrap' or 'jui', you'll need to add the "uitheme"
		// widget and also set it to the same name
		// this option only adds a table class name "tablesorter-{theme}"
		theme: 'jui',

		// fix the column widths
		widthFixed: false,

		// Show an indeterminate timer icon in the header when the table
		// is sorted or filtered
		showProcessing: false,

		// header layout template (HTML ok); {content} = innerHTML,
		// {icon} = <i/> (class from cssIcon)
		headerTemplate: '{content}{icon}',

		// return the modified template string
		onRenderTemplate: null, // function(index, template){ return template; },

		// called after each header cell is rendered, use index to target the column
		// customize header HTML
		onRenderHeader: function (index) {
			// the span wrapper is added by default
			$(this).find('div.tablesorter-header-inner').addClass('roundedCorners');
		},

		// *** FUNCTIONALITY ***
		// prevent text selection in header
		cancelSelection: true,

		// other options: "ddmmyyyy" & "yyyymmdd"
		dateFormat: "mmddyyyy",

		// The key used to select more than one column for multi-column
		// sorting.
		sortMultiSortKey: "shiftKey",

		// key used to remove sorting on a column
		sortResetKey: 'ctrlKey',

		// false for German "1.234.567,89" or French "1 234 567,89"
		usNumberFormat: true,

		// If true, parsing of all table cell data will be delayed
		// until the user initializes a sort
		delayInit: false,

		// if true, server-side sorting should be performed because
		// client-side sorting will be disabled, but the ui and events
		// will still be used.
		serverSideSorting: false,

		// *** SORT OPTIONS ***
		// These are detected by default,
		// but you can change or disable them
		// these can also be set using data-attributes or class names
		headers: {
			// set "sorter : false" (no quotes) to disable the column
			0: {
				sorter: "text"
			},
			1: {
				sorter: "date"
			},
			2: {
				sorter: "text"
			}
		},

		// ignore case while sorting
		ignoreCase: true,

		// forces the user to have this/these column(s) sorted first
		sortForce: null,
		// initial sort order of the columns, example sortList: [[0,0],[1,0]],
		// [[columnIndex, sortDirection], ... ]
		sortList: [
			[0, 0]

		],
		// default sort that is added to the end of the users sort
		// selection.
		sortAppend: null,

		// starting sort direction "asc" or "desc"
		sortInitialOrder: "asc",

		// Replace equivalent character (accented characters) to allow
		// for alphanumeric sorting
		sortLocaleCompare: false,

		// third click on the header will reset column to default - unsorted
		sortReset: false,

		// restart sort to "sortInitialOrder" when clicking on previously
		// unsorted columns
		sortRestart: false,

		// sort empty cell to bottom, top, none, zero
		emptyTo: "bottom",

		// sort strings in numerical column as max, min, top, bottom, zero
		stringTo: "max",

		// extract text from the table - this is how is
		// it done by default
		textExtraction: {
			0: function (node) {
				return $(node).text();
			},
			1: function (node) {
				return $(node).text();
			}
		},

		// use custom text sorter
		// function(a,b){ return a.sort(b); } // basic sort
		textSorter: null,

		// *** WIDGETS ***

		// apply widgets on tablesorter initialization
		initWidgets: true,

		// include zebra and any other widgets, options:
		// 'columns', 'filter', 'stickyHeaders' & 'resizable'
		// 'uitheme' is another widget, but requires loading
		// a different skin and a jQuery UI theme.
		widgets: ['uitheme',  'columns'],

		widgetOptions: {
		  // extra class name added to the sticky header row
		  stickyHeaders : '',
		  // number or jquery selector targeting the position:fixed element
		  stickyHeaders_offset : 50,
		  // added to table ID, if it exists
		  stickyHeaders_cloneId : '-sticky',
		  // trigger "resize" event on headers
		  stickyHeaders_addResizeEvent : true,
		  // if false and a caption exist, it won't be included in the sticky header
		  stickyHeaders_includeCaption : true,
		  // The zIndex of the stickyHeaders, allows the user to adjust this to their needs
		  stickyHeaders_zIndex : 2,
		  // jQuery selector or object to attach sticky header to
		  stickyHeaders_attachTo : null,
		  // scroll table top into view after filtering
		  stickyHeaders_filteredToTop: true,
			// zebra widget: adding zebra striping, using content and
			// default styles - the ui css removes the background
			// from default even and odd class names included for this
			// demo to allow switching themes
			// [ "even", "odd" ]
			zebra: [
				"ui-widget-content even",
				"ui-state-default odd"],

			// uitheme widget: * Updated! in tablesorter v2.4 **
			// Instead of the array of icon class names, this option now
			// contains the name of the theme. Currently jQuery UI ("jui")
			// and Bootstrap ("bootstrap") themes are supported. To modify
			// the class names used, extend from the themes variable
			// look for the "$.extend($.tablesorter.themes.jui" code below
			uitheme: 'jui',

			// columns widget: change the default column class names
			// primary is the 1st column sorted, secondary is the 2nd, etc
			columns: [
				"primary",
				"secondary",
				"tertiary"],

			// columns widget: If true, the class names from the columns
			// option will also be added to the table tfoot.
			columns_tfoot: true,

			// columns widget: If true, the class names from the columns
			// option will also be added to the table thead.
			columns_thead: true,

			// filter widget: If there are child rows in the table (rows with
			// class name from "cssChildRow" option) and this option is true
			// and a match is found anywhere in the child row, then it will make
			// that row visible; default is false
			filter_childRows: false,

			// filter widget: If true, a filter will be added to the top of
			// each table column.
			filter_columnFilters: true,

			// filter widget: css class applied to the table row containing the
			// filters & the inputs within that row
			filter_cssFilter: "tablesorter-filter",

			// filter widget: Customize the filter widget by adding a select
			// dropdown with content, custom options or custom filter functions
			// see http://goo.gl/HQQLW for more details
			filter_functions: null,

			// filter widget: Set this option to true to hide the filter row
			// initially. The rows is revealed by hovering over the filter
			// row or giving any filter input/select focus.
			filter_hideFilters: false,

			// filter widget: Set this option to false to keep the searches
			// case sensitive
			filter_ignoreCase: true,

			// filter widget: jQuery selector string of an element used to
			// reset the filters.
			filter_reset: null,

			// Delay in milliseconds before the filter widget starts searching;
			// This option prevents searching for every character while typing
			// and should make searching large tables faster.
			filter_searchDelay: 300,

			// Set this option to true if filtering is performed on the server-side.
			filter_serversideFiltering: false,

			// filter widget: Set this option to true to use the filter to find
			// text from the start of the column. So typing in "a" will find
			// "albert" but not "frank", both have a's; default is false
			filter_startsWith: false,

			// filter widget: If true, ALL filter searches will only use parsed
			// data. To only use parsed data in specific columns, set this option
			// to false and add class name "filter-parsed" to the header
			filter_useParsedData: false,

			// Resizable widget: If this option is set to false, resized column
			// widths will not be saved. Previous saved values will be restored
			// on page reload
			resizable: true,

			// saveSort widget: If this option is set to false, new sorts will
			// not be saved. Any previous saved sort will be restored on page
			// reload.
			saveSort: true,

			// stickyHeaders widget: css class name applied to the sticky header
			stickyHeaders: "tablesorter-stickyHeader"

		},

		// *** CALLBACKS ***
		// function called after tablesorter has completed initialization
		initialized: function (table) {},

		// *** CSS CLASS NAMES ***
		tableClass: 'tablesorter',
		cssAsc: "tablesorter-headerSortUp",
		cssDesc: "tablesorter-headerSortDown",
		cssHeader: "tablesorter-header",
		cssHeaderRow: "tablesorter-headerRow",
		cssIcon: "tablesorter-icon",
		cssChildRow: "tablesorter-childRow",
		cssInfoBlock: "tablesorter-infoOnly",
		cssProcessing: "tablesorter-processing",

		// *** SELECTORS ***
		// jQuery selectors used to find the header cells.
		selectorHeaders: '> thead th, > thead td',

		// jQuery selector of content within selectorHeaders
		// that is clickable to trigger a sort.
		selectorSort: "th, td",

		// rows with this class name will be removed automatically
		// before updating the table cache - used by "update",
		// "addRows" and "appendCache"
		selectorRemove: "tr.remove-me",

		// *** DEBUGING ***
		// send messages to console
		debug: false

	});
}
// Extend the themes to change any of the default class names ** NEW ** 
$.extend($.tablesorter.themes.jui, {
    // change default jQuery uitheme icons - find the full list of icons 
    // here: http://jqueryui.com/themeroller/ (hover over them for their name) 
    table: 'ui-widget ui-widget-content ui-corner-all', // table classes 
    header: 'ui-widget-header ui-corner-all ui-state-default', // header classes 
	footerRow: '',
	footerCells: '',
    icons: 'ui-icon',    // icon class added to the <i> in the header 
    sortNone: 'ui-icon-carat-2-n-s',
    sortAsc: 'ui-icon-carat-1-n',
    sortDesc: 'ui-icon-carat-1-s',
    active: 'ui-state-active', // applied when column is sorted 
    hover: 'ui-state-hover', // hover class 
    filterRow: '',
    even: 'ui-widget-content', // even row zebra striping 
    odd: 'ui-state-default' // odd row zebra striping 
});

$.extend($.tablesorter.themes.bootstrap, {
    // these classes are added to the table. To see other table classes available,
    // look here: http://twitter.github.com/bootstrap/base-css.html#tables
    table: 'table table-bordered table-striped',
    header: 'bootstrap-header', // give the header a gradient background
	footerRow  : '',
	footerCells: '',
    icons: '', // add "icon-white" to make them white; class added to the <i>
    sortNone: 'bootstrap-icon-unsorted',
    sortAsc: 'icon-chevron-up',
    sortDesc: 'icon-chevron-down',
    active: '', // applied when column is sorted
    hover: '', // use custom css here - bootstrap class may not override it
    filterRow: '', // filter row class
    even: '', // odd row zebra striping
    odd: '' // even row zebra striping
});
function addRowHandlers() {
    var table = document.getElementById("NotificationList");
    var rows = table.getElementsByTagName("tr");
    for (i = 0; i < rows.length; i++) {
        var currentRow = table.rows[i];
        var createClickHandler = 
            function(row) 
            {
                return function() { 
                                        var cell = row.getElementsByTagName("td")[0];
                                        var id = cell.innerHTML;
										
											id+="|"+row.getElementsByTagName("td")[1].innerHTML;
				
										if(DeleteClicked==false){
											window.location.href='JobsNotificationDetails.htm?NotifNo='+id
											}
                                 
                                 };
            };

        currentRow.onclick = createClickHandler(currentRow);
    }
	SetTableSort();
}

var w = null; // initialize variable
function startBGSync()
{

		 syncDT=localStorage.getItem('LastSyncedDT')		 
		 document.getElementById("lastsync").innerHTML = "Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)
		 syncDT=localStorage.getItem('LastSyncReference')
		 document.getElementById("referenceSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncReferenceDetails')+" "
		 syncDT=localStorage.getItem('LastSyncTransactional')
		 document.getElementById("transactionalSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncTransactionalDetails')+"  "
		 syncDT=localStorage.getItem('LastSyncUpload')
		 document.getElementById("uploadSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncUploadDetails')

   // First check whether Web Workers are supported
   if (typeof(Worker)!=="undefined"){
      // Check whether Web Worker has been created. If not, create a new Web Worker based on the Javascript file simple-timer.js
      if (w==null){
         w = new Worker("bgsync.js");
      }
      // Update timer div with output from Web Worker
      w.onmessage = function (event) {      
		 syncReference()
		 syncTransactional()
		 syncUpload()
		 syncDT=localStorage.getItem('LastSyncedDT')		 
		 document.getElementById("lastsync").innerHTML = "Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)
		 syncDT=localStorage.getItem('LastSyncReference')
		 document.getElementById("referenceSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncReferenceDetails')+" "
		 syncDT=localStorage.getItem('LastSyncTransactional')
		 document.getElementById("transactionalSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncTransactionalDetails')+"  "
		 syncDT=localStorage.getItem('LastSyncUpload')
		 document.getElementById("uploadSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncUploadDetails')


		 };
   } else {
      // Web workers are not supported by your browser
      document.getElementById("lastsync").innerHTML = "Sorry, your browser does not support Web Workers ...";
   }
}

startBGSync();
function Scan(){

{
        //alert('scanning');
        
        var scanner = cordova.require("cordova/plugin/BarcodeScanner");

        scanner.scan( function (result) { 

            //alert("We got a barcode\n" + 
            //"Result: " + result.text + "\n" + 
            //"Format: " + result.format + "\n" + 
            //"Cancelled: " + result.cancelled);  

            $("#Equipment").val(result.text);
           // alert(result);


        }, function (error) { 
           //alert("Scanning failed: ", error); 
        } );
    }
}
var onSuccess = function(position) {
    alert('Latitude: '          + position.coords.latitude          + '\n' +
          'Longitude: '         + position.coords.longitude         + '\n' +
          'Altitude: '          + position.coords.altitude          + '\n' +
          'Accuracy: '          + position.coords.accuracy          + '\n' +
          'Altitude Accuracy: ' + position.coords.altitudeAccuracy  + '\n' +
          'Heading: '           + position.coords.heading           + '\n' +
          'Speed: '             + position.coords.speed             + '\n' +
          'Timestamp: '         + position.timestamp                + '\n');
};

// onError Callback receives a PositionError object
//
function onError(error) {
    alert('code: '    + error.code    + '\n' +
          'message: ' + error.message + '\n');
}
function getLocation()
{
navigator.geolocation.getCurrentPosition(onSuccess, onError);
}	
function takePhoto(){
	//syncThePhoto(CurrentNotifNo,"xx")
	navigator.camera.getPicture(onSuccess, onFail, { quality: 50,
	    destinationType: Camera.DestinationType.DATA_URL});
}

function onSuccess(imageData) {
    
    //var b64data = "data:image/jpeg;base64," + imageData;

    //syncThePhoto(CurrentNotifNo,b64data)
}

function onFail(message) {
    //alert('Failed because: ' + message);
}
</script>


</body>


</html>

