<!DOCTYPE html>
<html>
<head>

  <title>Jobs - Orders
  </title>
<script src="js/html5sql.js"></script>  
<script src="js/MyJobsDB.js"></script>
<script src="js/MyJobsUtils.js"></script>
  <script type='text/javascript' src='js/jquery-1.11.1.min.js'></script>
  <script type='text/javascript' src='js/jquery.mobile-1.4.2.min.js'></script>
  <link rel="stylesheet" type="text/css" href="css/jquery.mobile-1.4.2.min.css">

<script src="js/jquery.mobile.datepicker.js"></script>
<script src="js/jquery-ui/datepicker.js"></script>


<script type='text/javascript' src="tablesorter/js/jquery.tablesorter.js"></script>
<script type='text/javascript' src="tablesorter/js/jquery.tablesorter.widgets.js"></script>

<script src="js/jquery.magnific-popup.min.js"></script>
<link href="css/font-awesome.min.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="tablesorter/css/theme.jui.css">
<link rel="stylesheet" type="text/css" href="tablesorter/css/theme.bootstrap.css">
<link rel="stylesheet" type="text/css" href="tablesorter/docs/css/bootstrap.min.css">
<link rel="stylesheet" type="text/css" href="css/jquery-ui.css">
<link rel="stylesheet" href="css/magnific-popup.css" />
  <script>
html5sql.openDatabase("com.PJO.MyJobs","MyJobs", 5*1024*1024);	

  </script>


  <style type='text/css'>
  .stripe{
	background-color: lightgrey; 
	color: black;
}
.checkboxtext
{
  /* Checkbox text */
  font-size: 110%;
  display: inline;
}
   .wrapper {
  position: relative;
  padding: 0 5px;
  height: 250px;
  overflow-y: auto;
}
 .mfp-fade.mfp-bg {
	opacity: 0.001; /* Chrome opacity transition bug */
	-webkit-transition: all 0.15s ease-out; 
	-moz-transition: all 0.15s ease-out; 
	transition: all 0.15s ease-out;
}
.mfp-fade.mfp-bg.mfp-ready {
	opacity: 0.8;
}
.mfp-fade.mfp-bg.mfp-removing {
	opacity: 0;
}

.mfp-fade.mfp-wrap .mfp-content {
	opacity: 0;
	-webkit-transition: all 0.15s ease-out; 
	-moz-transition: all 0.15s ease-out; 
	transition: all 0.15s ease-out;
}
.mfp-fade.mfp-wrap.mfp-ready .mfp-content {
	opacity: 1;
}
.mfp-fade.mfp-wrap.mfp-removing .mfp-content {
	opacity: 0;
}
  .block {
    border: 1px solid grey;
    width: 180px;
    height:150px;
    display: inline-block;
    margin: 1em 1em 1em 1em;

border-radius: 15px;
    left:50px
}
  .highlight {

     box-shadow: 5px 5px 5px #888888;

  }   
.ui-btn-width {
    width: 200px !important;
}  
.box {
    border: 1px solid #a1a1a1;
    padding: 10px 10px; 
    background: #dddddd;
    
    border-radius: 5px;
}
TxR *
{
   font-size: small !important;
   color: #000 !important;
   font-family: Arial !important;
}
  </style>

 
</head>
<body>
<div  data-role="page" id="JobsOrders"> 

	<div   data-role="header" data-position="fixed">
		
		<table width = "95%">
			<TR height="50px">
				<TD width = "20%"  align="left"><a style="font-size: 100%" href="javascript:window.location.href='JobsHome.htm'"  >
				<i class="fa fa-home fa-2x pull-left fa-border"></i></a></td>
			
				<TD width = "60%"  align= "center"><h1 style="font-size: 100%"><B>MyJobs - Orders</B></H1>
				<a href="#lastSyncDets" data-rel="popup"style="color: green; text-decoration:none;"> <Small><P id="lastsync"></p></A></small></TD>
				
				<TD width = "20%" align="right"></TD>
			</TR>
		</table>		
	
	</div> 
	<div  data-role="content">	

			<table  id="OrderList" name="OrderList" cellspacing="0"  style="border-spacing: 0;" class="tablesorter1 ">
				
			</table>



	</div>
	<div style='display:none'>	
		<div data-role="popup" id="lastSyncDets">
		  <p id='referenceSyncDetails' ></p>
		  <p id='transactionalSyncDetails' ></p>
		  <p id='uploadSyncDetails' ></p>
		</div>
	</div>


</div>




<script>
var PopupScreen=false;
	






function addRowHandlers() {
    var table = document.getElementById("OrderList");
    var rows = table.getElementsByTagName("tr");
    for (i = 0; i < rows.length; i++) {
        var currentRow = table.rows[i];
        var createClickHandler = 
            function(row) 
            {
                return function() { 
                                        var cell = row.getElementsByTagName("td")[0].innerHTML
										//alert(cell)
										var odets=cell.split(":");
                                        var id = odets[0];
										
										var status = odets[2];
										
                                        var notifno = odets[1];
										
										if(PopupScreen==false)
											{
											if(status.indexOf("Rejected")>0)
												{
												alert("Cant Change Rejected")
												}
												else if(status.indexOf("Job Started")>-1)
												{
												window.location.href='JobsOrdersDetails.htm?JobNo='+id+'&Status=OnSite'+'&NotifNo='+notifno
												}
												else if(status.indexOf("On Route")>-1)
												{
												window.location.href='JobsOrdersDetails.htm?JobNo='+id+'&Status=OnRoute'+'&NotifNo='+notifno
												}
												else if(status.indexOf("Job Accepted")>-1)
												{
												window.location.href='JobsOrdersDetails.htm?JobNo='+id+'&Status=Accepted'+'&NotifNo='+notifno
												}
												else if(status.indexOf("Job Suspended")>-1)
												{
												window.location.href='JobsOrdersDetails.htm?JobNo='+id+'&Status=Suspended'+'&NotifNo='+notifno
												}
												else if(status.indexOf("Job Finished")>-1)
												{
												window.location.href='JobsOrdersDetails.htm?JobNo='+id+'&Status=Finished'+'&NotifNo='+notifno
												}
												else
												{
												window.location.href='JobsOrdersDetails.htm?JobNo='+id+'&Status=Dispatched'+'&NotifNo='+notifno
												}
											}else{
											PopupScreen=false;
											}
                                 };
            };

        currentRow.onclick = createClickHandler(currentRow);
    }
	SetTableSort();
}

function zeroFill( number, width )
{
  width -= number.toString().length;
  if ( width > 0 )
  {
    return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
  }
  return number + ""; // always return a string
}



function setPopupScreen(){

PopupScreen=true
}
function isEven(value) {
return (value%2 == 0);
}
function BuildOrderList(){
var Stripe="";
var opMap="";
var opGas="";
var opAppt=""
var HTMLToOutput='';
var n=1;
var EmployeeID=localStorage.getItem("EmployeeID")
HTMLToOutput+= '<thead >'
HTMLToOutput+= '					<tr class="font-size: small">'
HTMLToOutput+= '						<th >Job</th>'
HTMLToOutput+= '						<th>Type</th>'
HTMLToOutput+= '						<th>Start</th>'
HTMLToOutput+= '						<th>End</th>'

HTMLToOutput+= '					</tr>'

HTMLToOutput+= '				</thead>'
HTMLToOutput+= '				<tbody >'

//SQLStatement="SELECT MyOperations.orderno, MyOperationsSplit.assignedto as empid, MyOperations.opno, viewoperationstatus.statusdesc as opstat, MyOrders.type, MyOperations.startdate, MyOperations.enddate, MyOrders.address,  MyOrders.notifno, MyOrders.gis, MyOperations.status, MyOrders.priority, MyOperations.apptstart, MyOperations.apptend, MyOrders.shorttext as orderdesc , MyOperations.shorttext as operationdesc , MyOrders.contact , MyOperationInfo.Type as infotype"
SQLStatement="SELECT MyOperations.orderno, MyOperationsSplit.assignedto as empid, MyOperations.opno, myuserstatus.statusdesc  as opstat, MyOrders.type, MyOperations.startdate, MyOperations.enddate, MyOrders.address,  MyOrders.notifno, MyOrders.gis, MyOperations.status, MyOrders.priority, MyOperations.apptstart, MyOperations.apptend, MyOrders.shorttext as orderdesc , MyOperations.shorttext as operationdesc , MyOrders.contact , MyOperationInfo.Type as infotype , MyOperationInfo.value1 as infovalue1, MyOperationInfo.value2 as infovalue2"
SQLStatement+=" From MyOperations "
SQLStatement+="left join myoperationinfo on myoperations.orderno = myoperationinfo.orderno "
SQLStatement+="	and myoperations.opno = myoperationinfo.opno "
SQLStatement+="left join myoperationssplit on myoperations.orderno = myoperationssplit.orderno "
SQLStatement+="	and myoperations.opno = myoperationssplit.opno "
SQLStatement+="left join myuserstatus on myoperations.orderno = myuserstatus.orderno "
SQLStatement+="	and myoperations.opno = myuserstatus.opno "
//SQLStatement+="left join viewoperationstatus on myoperations.orderno = viewoperationstatus.orderno "
//SQLStatement+="	and myoperations.opno = viewoperationstatus.opno "


SQLStatement+="left join myorders on myoperations.orderno = myorders.orderno "
SQLStatement+=" where myoperationssplit.assignedto = '"+EmployeeID+"'"
	html5sql.process(SQLStatement,
	 function(transaction, results, rowsArray){
				for (var n = 0; n < rowsArray.length; n++) {
					item = rowsArray[n];
					
					opMap="";
					opGas="";
					opAppt="";
					Stripe="";
					var JobNo=""
					if (isEven(n)){
						Stripe='stripe';
						}
					if(item['infotype']=="APPT")
						{
						opAppt+= '			<a href="#popupPadded'+n+'" onClick="setPopupScreen()" data-position-to="window"  data-rel="popup" data-transition="pop"  >';
						opAppt+= '				<img data-tooltip="fffff" src="images\\appt.gif" style="max-width:100%;" ></A>';
						opAppt+= '				<div data-role="popup" id="popupPadded'+n+'" style = "background:yellow !important" class="ui-content">';
						opAppt+= '					<p>';
						opAppt+= '						<CENTER><STRONG> Appointment </STRONG></CENTER>';
						opAppt+= '						<BR>';
						opAppt+= '						Date: <STRONG>'+item.infovalue1.substring(0,4)+"-"+item.infovalue1.substring(4,6)+"-"+item.infovalue1.substring(6,8)+'</STRONG>';
						opAppt+= '						<BR>';
						opAppt+= '						Time: <STRONG>'+item.infovalue2.substring(0,2)+":"+item.infovalue2.substring(2,4)+'</STRONG>';
						opAppt+= '					</p>';
						opAppt+= '				</div>';
						}

						if(item['type']=='PM02')
						{
						opAppt+='<img src="images\\gasTransparent.gif" style="max-width:100%;" alt="Gas Inspection">';

						}
					JobNo=item.orderno+'-'+item.opno;

					HTMLToOutput+= '	<tr class="'+Stripe+' font-size: small">';	
					HTMLToOutput+= '			<td  hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td>';
					HTMLToOutput+= '			<td>'+parseInt(item.orderno, 10)+'-'+item.opno+'</td>';
					HTMLToOutput+= '			<td>'+item.type+'</td>';
					HTMLToOutput+= '			<td>'+convertDate(item.startdate)+'</td>';
					HTMLToOutput+= '			<td>'+convertDate(item.enddate)+'</td>';
	
					
					HTMLToOutput+= '	</tr>';	
					HTMLToOutput+= '	<tr class="tablesorter-childRow '+Stripe+' font-size: small"><td hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td><td colspan="2">Order Details:</TD><td colspan="2">'+item.orderdesc+'</td></tr>';
					HTMLToOutput+= '	<tr class="tablesorter-childRow '+Stripe+' font-size: small"><td hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td><td colspan="2">Operations Details:</TD><td colspan="2">'+item.operationdesc+'</td></tr>';
					HTMLToOutput+= '	<tr class="tablesorter-childRow '+Stripe+' font-size: small"><td hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td></td><td colspan="2">Customer Details:  </TD><td colspan="2">'+item.contact+'</td></tr>';
					
					HTMLToOutput+= '	<tr class="tablesorter-childRow '+Stripe+' font-size: small"><td hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td><td colspan="2">Location:</TD><td colspan="2">'+item.address+'</td></tr>';
					HTMLToOutput+= '	<tr class="tablesorter-childRow '+Stripe+' font-size: small"><td hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td><td colspan="2">Status:</TD><td colspan="2">'+item['opstat']+'</td></tr>';
					HTMLToOutput+= '	<tr class="tablesorter-childRow '+Stripe+' font-size: small"><td hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td></td><td colspan="2">Priority</TD><td colspan="2">'+item['priority']+'</td></tr>';
					HTMLToOutput+= '	<tr class="tablesorter-childRow '+Stripe+' font-size: small"><td hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td></td><td colspan="2">Info</TD><td colspan="2">'+opAppt+'</td></tr>';
					
					HTMLToOutput+= '	<tr class="tablesorter-childRow '+Stripe+' font-size: small"><td hidden>'+JobNo+":"+item.notifno+":"+item['opstat']+'</td><td colspan="4">&nbsp;</td></tr>';

					}

HTMLToOutput+= '				</tbody >'	
			$( "#OrderList").html(HTMLToOutput);
			$( "#OrderList").trigger('create');
			addRowHandlers();

		
	 },
	 function(error, statement){
		alert(error.message +statement)
	 }        
	);



}



function SetTableSort()
{
$('table').tablesorter({

    // *** APPEARANCE ***
    // Add a theme - try 'blackice', 'blue', 'dark', 'default'
    //  'dropbox', 'green', 'grey' or 'ice'
    // to use 'bootstrap' or 'jui', you'll need to add the "uitheme"
    // widget and also set it to the same name
    // this option only adds a table class name "tablesorter-{theme}"
    theme: 'jui',

    // fix the column widths
    widthFixed: false,

    // Show an indeterminate timer icon in the header when the table
    // is sorted or filtered
    showProcessing: false,

    // header layout template (HTML ok); {content} = innerHTML,
    // {icon} = <i/> (class from cssIcon)
    headerTemplate: '{content}{icon}',

    // return the modified template string
    onRenderTemplate: null, // function(index, template){ return template; },

    // called after each header cell is rendered, use index to target the column
    // customize header HTML
    onRenderHeader: function (index) {
        // the span wrapper is added by default
        $(this).find('div.tablesorter-header-inner').addClass('roundedCorners');
    },

    // *** FUNCTIONALITY ***
    // prevent text selection in header
    cancelSelection: true,

    // other options: "ddmmyyyy" & "yyyymmdd"
    dateFormat: "mmddyyyy",

    // The key used to select more than one column for multi-column
    // sorting.
    sortMultiSortKey: "shiftKey",

    // key used to remove sorting on a column
    sortResetKey: 'ctrlKey',

    // false for German "1.234.567,89" or French "1 234 567,89"
    usNumberFormat: true,

    // If true, parsing of all table cell data will be delayed
    // until the user initializes a sort
    delayInit: false,

    // if true, server-side sorting should be performed because
    // client-side sorting will be disabled, but the ui and events
    // will still be used.
    serverSideSorting: false,

    // *** SORT OPTIONS ***
    // These are detected by default,
    // but you can change or disable them
    // these can also be set using data-attributes or class names
    headers: {
        // set "sorter : false" (no quotes) to disable the column
        0: {
            sorter: "text"
        },
        1: {
            sorter: "text"
        },
        2: {
            sorter: "date"
        },
        3: {
            sorter: "date"
        }
    },

    // ignore case while sorting
    ignoreCase: true,

    // forces the user to have this/these column(s) sorted first
    sortForce: null,
    // initial sort order of the columns, example sortList: [[0,0],[1,0]],
    // [[columnIndex, sortDirection], ... ]
    sortList: [
        [0, 0]

    ],
    // default sort that is added to the end of the users sort
    // selection.
    sortAppend: null,

    // starting sort direction "asc" or "desc"
    sortInitialOrder: "asc",

    // Replace equivalent character (accented characters) to allow
    // for alphanumeric sorting
    sortLocaleCompare: false,

    // third click on the header will reset column to default - unsorted
    sortReset: false,

    // restart sort to "sortInitialOrder" when clicking on previously
    // unsorted columns
    sortRestart: false,

    // sort empty cell to bottom, top, none, zero
    emptyTo: "bottom",

    // sort strings in numerical column as max, min, top, bottom, zero
    stringTo: "max",

    // extract text from the table - this is how is
    // it done by default
    textExtraction: {
        0: function (node) {
            return $(node).text();
        },
        1: function (node) {
            return $(node).text();
        }
    },

    // use custom text sorter
    // function(a,b){ return a.sort(b); } // basic sort
    textSorter: null,

    // *** WIDGETS ***

    // apply widgets on tablesorter initialization
    initWidgets: true,

    // include zebra and any other widgets, options:
    // 'columns', 'filter', 'stickyHeaders' & 'resizable'
    // 'uitheme' is another widget, but requires loading
    // a different skin and a jQuery UI theme.
    widgets: ['uitheme',  'columns'],

    widgetOptions: {
      // extra class name added to the sticky header row
      stickyHeaders : '',
      // number or jquery selector targeting the position:fixed element
      stickyHeaders_offset : 50,
      // added to table ID, if it exists
      stickyHeaders_cloneId : '-sticky',
      // trigger "resize" event on headers
      stickyHeaders_addResizeEvent : true,
      // if false and a caption exist, it won't be included in the sticky header
      stickyHeaders_includeCaption : true,
      // The zIndex of the stickyHeaders, allows the user to adjust this to their needs
      stickyHeaders_zIndex : 2,
      // jQuery selector or object to attach sticky header to
      stickyHeaders_attachTo : null,
      // scroll table top into view after filtering
      stickyHeaders_filteredToTop: true,
        // zebra widget: adding zebra striping, using content and
        // default styles - the ui css removes the background
        // from default even and odd class names included for this
        // demo to allow switching themes
        // [ "even", "odd" ]
        zebra: [
            "ui-widget-content even",
            "ui-state-default odd"],

        // uitheme widget: * Updated! in tablesorter v2.4 **
        // Instead of the array of icon class names, this option now
        // contains the name of the theme. Currently jQuery UI ("jui")
        // and Bootstrap ("bootstrap") themes are supported. To modify
        // the class names used, extend from the themes variable
        // look for the "$.extend($.tablesorter.themes.jui" code below
        uitheme: 'jui',

        // columns widget: change the default column class names
        // primary is the 1st column sorted, secondary is the 2nd, etc
        columns: [
            "primary",
            "secondary",
            "tertiary"],

        // columns widget: If true, the class names from the columns
        // option will also be added to the table tfoot.
        columns_tfoot: true,

        // columns widget: If true, the class names from the columns
        // option will also be added to the table thead.
        columns_thead: true,

        // filter widget: If there are child rows in the table (rows with
        // class name from "cssChildRow" option) and this option is true
        // and a match is found anywhere in the child row, then it will make
        // that row visible; default is false
        filter_childRows: false,

        // filter widget: If true, a filter will be added to the top of
        // each table column.
        filter_columnFilters: true,

        // filter widget: css class applied to the table row containing the
        // filters & the inputs within that row
        filter_cssFilter: "tablesorter-filter",

        // filter widget: Customize the filter widget by adding a select
        // dropdown with content, custom options or custom filter functions
        // see http://goo.gl/HQQLW for more details
        filter_functions: null,

        // filter widget: Set this option to true to hide the filter row
        // initially. The rows is revealed by hovering over the filter
        // row or giving any filter input/select focus.
        filter_hideFilters: false,

        // filter widget: Set this option to false to keep the searches
        // case sensitive
        filter_ignoreCase: true,

        // filter widget: jQuery selector string of an element used to
        // reset the filters.
        filter_reset: null,

        // Delay in milliseconds before the filter widget starts searching;
        // This option prevents searching for every character while typing
        // and should make searching large tables faster.
        filter_searchDelay: 300,

        // Set this option to true if filtering is performed on the server-side.
        filter_serversideFiltering: false,

        // filter widget: Set this option to true to use the filter to find
        // text from the start of the column. So typing in "a" will find
        // "albert" but not "frank", both have a's; default is false
        filter_startsWith: false,

        // filter widget: If true, ALL filter searches will only use parsed
        // data. To only use parsed data in specific columns, set this option
        // to false and add class name "filter-parsed" to the header
        filter_useParsedData: false,

        // Resizable widget: If this option is set to false, resized column
        // widths will not be saved. Previous saved values will be restored
        // on page reload
        resizable: true,

        // saveSort widget: If this option is set to false, new sorts will
        // not be saved. Any previous saved sort will be restored on page
        // reload.
        saveSort: true,

        // stickyHeaders widget: css class name applied to the sticky header
        stickyHeaders: "tablesorter-stickyHeader"

    },

    // *** CALLBACKS ***
    // function called after tablesorter has completed initialization
    initialized: function (table) {},

    // *** CSS CLASS NAMES ***
    tableClass: 'tablesorter',
    cssAsc: "tablesorter-headerSortUp",
    cssDesc: "tablesorter-headerSortDown",
    cssHeader: "tablesorter-header",
    cssHeaderRow: "tablesorter-headerRow",
    cssIcon: "tablesorter-icon",
    cssChildRow: "tablesorter-childRow",
    cssInfoBlock: "tablesorter-infoOnly",
    cssProcessing: "tablesorter-processing",

    // *** SELECTORS ***
    // jQuery selectors used to find the header cells.
    selectorHeaders: '> thead th, > thead td',

    // jQuery selector of content within selectorHeaders
    // that is clickable to trigger a sort.
    selectorSort: "th, td",

    // rows with this class name will be removed automatically
    // before updating the table cache - used by "update",
    // "addRows" and "appendCache"
    selectorRemove: "tr.remove-me",

    // *** DEBUGING ***
    // send messages to console
    debug: false

});
}  


// Extend the themes to change any of the default class names ** NEW ** 
$.extend($.tablesorter.themes.jui, {
    // change default jQuery uitheme icons - find the full list of icons 
    // here: http://jqueryui.com/themeroller/ (hover over them for their name) 
    table: 'ui-widget ui-widget-content ui-corner-all', // table classes 
    header: 'ui-widget-header ui-corner-all ui-state-default', // header classes 
	footerRow: '',
	footerCells: '',
    icons: 'ui-icon',    // icon class added to the <i> in the header 
    sortNone: 'ui-icon-carat-2-n-s',
    sortAsc: 'ui-icon-carat-1-n',
    sortDesc: 'ui-icon-carat-1-s',
    active: 'ui-state-active', // applied when column is sorted 
    hover: 'ui-state-hover', // hover class 
    filterRow: '',
    even: 'ui-widget-content', // even row zebra striping 
    odd: 'ui-state-default' // odd row zebra striping 
});

$.extend($.tablesorter.themes.bootstrap, {
    // these classes are added to the table. To see other table classes available,
    // look here: http://twitter.github.com/bootstrap/base-css.html#tables
    table: 'table table-bordered table-striped',
    header: 'bootstrap-header', // give the header a gradient background
	footerRow  : '',
	footerCells: '',
    icons: '', // add "icon-white" to make them white; class added to the <i>
    sortNone: 'bootstrap-icon-unsorted',
    sortAsc: 'icon-chevron-up',
    sortDesc: 'icon-chevron-down',
    active: '', // applied when column is sorted
    hover: '', // use custom css here - bootstrap class may not override it
    filterRow: '', // filter row class
    even: '', // odd row zebra striping
    odd: '' // even row zebra striping
});
BuildOrderList();
var w = null; // initialize variable
function startBGSync()
{

		 syncDT=localStorage.getItem('LastSyncedDT')		 
		 document.getElementById("lastsync").innerHTML = "Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)
		 syncDT=localStorage.getItem('LastSyncReference')
		 document.getElementById("referenceSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncReferenceDetails')+" "
		 syncDT=localStorage.getItem('LastSyncTransactional')
		 document.getElementById("transactionalSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncTransactionalDetails')+"  "
		 syncDT=localStorage.getItem('LastSyncUpload')
		 document.getElementById("uploadSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncUploadDetails')

   // First check whether Web Workers are supported
   if (typeof(Worker)!=="undefined"){
      // Check whether Web Worker has been created. If not, create a new Web Worker based on the Javascript file simple-timer.js
      if (w==null){
         w = new Worker("bgsync.js");
      }
      // Update timer div with output from Web Worker
      w.onmessage = function (event) {      
		 syncReference()
		 syncTransactional()
		 syncUpload()
		 syncDT=localStorage.getItem('LastSyncedDT')		 
		 document.getElementById("lastsync").innerHTML = "Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)
		 syncDT=localStorage.getItem('LastSyncReference')
		 document.getElementById("referenceSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncReferenceDetails')+" "
		 syncDT=localStorage.getItem('LastSyncTransactional')
		 document.getElementById("transactionalSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncTransactionalDetails')+"  "
		 syncDT=localStorage.getItem('LastSyncUpload')
		 document.getElementById("uploadSyncDetails").innerHTML ="Last Synced: "+syncDT.substring(0,4)+"-"+syncDT.substring(4,6)+"-"+syncDT.substring(6,8)+" "+syncDT.substring(8,10)+":"+syncDT.substring(10,12)+"<BR>"+localStorage.getItem('LastSyncUploadDetails')


		 };
   } else {
      // Web workers are not supported by your browser
      document.getElementById("lastsync").innerHTML = "Sorry, your browser does not support Web Workers ...";
   }
}

startBGSync();
</script>


</body>


</html>

